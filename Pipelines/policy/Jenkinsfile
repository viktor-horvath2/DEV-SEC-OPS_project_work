pipeline { //policy-check
    environment { // base infra pipeline folder saved as var
        infrapath = "/var/jenkins_home/workspace/AZ_test@2"
    }
    agent any
    stages {
        stage('Policycheck-config-Init') {
            steps {// Terraform initialization sets the remote backend for the policy resources
                    dir("${infrapath}") { // copy existing infra IaCs
                    sh script: '''
                              cp ./Azure-Infra-TF/02_resources/*.tf ./Azure-Infra-TF/03_policy_check/
                              cp ./Azure-Infra-TF/02_resources/variables.auto.tfvars ./Azure-Infra-TF/03_policy_check/
                            '''
                    }
                    withCredentials([string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                                string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                                string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                                string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID')]) {
                                    dir("${infrapath}/Azure-Infra-TF/03_policy_check") {
                                        sh script: ''' set +x
                                                ../../terraform init -input=false \
                                                    -var="arm_client_id=$ARM_CLIENT_ID" \
                                                    -var="arm_client_secret=$ARM_CLIENT_SECRET" \
                                                    -var="arm_subscription_id=$ARM_SUBSCRIPTION_ID" \
                                                    -var="arm_tenant_id=$ARM_TENANT_ID" \
                                                    -backend-config=../02_resources/config.tfbackend
                                            '''
                                    }
                                }
            }
        }
        stage('Config-Apply') {
            steps {// Apply the configuration
                    withCredentials([string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                                string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                                string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                                string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID')]) {
                                    dir("${infrapath}/Azure-Infra-TF/03_policy_check") {
                                        sh script: ''' set +x
                                                    ../../terraform plan \
                                                    -out s1.tfplan \
                                                    -var="arm_client_id=$ARM_CLIENT_ID" \
                                                    -var="arm_client_secret=$ARM_CLIENT_SECRET" \
                                                    -var="arm_subscription_id=$ARM_SUBSCRIPTION_ID" \
                                                    -var="arm_tenant_id=$ARM_TENANT_ID"
                                                '''
                                    }
                                }
                    input 'Deploy?'
                    withCredentials([string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                                string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                                string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                                string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID')]) {
                                    dir("${infrapath}/Azure-Infra-TF/03_policy_check") {
                                        sh script: '../../terraform apply s1.tfplan'
                                    }
                                }
                }
        }
    }
}
